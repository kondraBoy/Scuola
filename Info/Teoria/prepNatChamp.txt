Definzione dei requisiti di un progetto/servizi software:
Molto importante nella fase di progettazione di un software, permette di definire cosa andrà a fare il programma.
I requisiti si dividono in:
	-Funzionali: si distinguono sulla base della funzione (l'utente deve effettuare il login)
	-Nn funzionali: sono più di carattere tecnico come sicurezza, manutenzione, stabilità. (La risposta dal server deve arrivare in 2 sec)

///////////////////

UML:
Unified Modeling Language. È un linguaggio usato per rapppresentare un sistema software attraverso l'utilizzo di modelli visuali. 

///////////////////

Diagramma di contesto:
Rappresenta gli attori (utenti o sistemi esterni) e le loro interazioni con il software. Come esempio di Attori ci possono essere banalmente un utente ed un admin che interagiscono con una stessa piattaforma

+-----------------------------+
|    Sistema Prenotazioni     |
|-----------------------------|
| - Registrazione/Login       |
| - Ricerca servizio          |
| - Prenotazione servizio     |
| - Pagamento                 |
| - Gestione catalogo         |
+-----------------------------+
    |              |
    |              |
 Cliente       Amministratore

///////////////////

Diagramma delle classi:
Definisce le classi, gli attributi, metodi e relazioni tra gli oggetti. Ad esempio:

+---------------------+
|      Persona        |
+---------------------+
| - nome: String      |
| - età: int          |
+---------------------+
| + Persona(nome: String, età: int) |
| + getNome(): String |
| + getEtà(): int     |
| + setNome(nome: String): void |
| + setEtà(età: int): void |
+---------------------+

            ^
            |   (Ereditarietà)
            |
+---------------------+
|     Studente        |
+---------------------+
| - matricola: String |
| - corso: String     |
+---------------------+
| + Studente(nome: String, età: int, matricola: String, corso: String) |
| + getMatricola(): String |
| + getCorso(): String   |
| + setMatricola(matricola: String): void |
| + setCorso(corso: String): void |
+---------------------+

///////////////////

Diagramma di sequenza:
Un diagramma di sequenza ha questi elementi principali:

	.Attori e oggetti: rappresentano chi partecipa alla sequenza (utente, sistema, database, ecc.).
	.Linee di vita: linee verticali che mostrano il tempo che passa.
	.Messaggi: frecce tra gli oggetti che rappresentano le chiamate ai metodi.
	.Attivazioni: rettangoli sulle linee di vita che mostrano quando un oggetto è attivo.

+--------+           +---------+           +-----------+
| Utente |           | Sistema |           | Database  |
+--------+           +---------+           +-----------+
     |                     |                     |
     |Inserisce credenziali|                     |
     |-------------------->|                     |
     |                     |                     |
     |                     | Verifica credenziali|
     |                     |-------------------->|
     |                     |                     |
     |                     |   Query verifica    |
     |                     |<--------------------|
     |                     |                     |
     |                     |   Risultato verifica|
     |                     |<--------------------|
     |                     |                     |
     |                     | Login riuscito      |
     |                     |-------------------->|
     |                     |                     |
     |                     |Msg di benvenuto     |
     |<--------------------|                     |
     |                     |                     |

///////////////////

Diagramma delle attività:
Rappresenta il flusso di controllo di un processo o attività all'interno di
un sistema. Viene utilizzato per descrivere il comportamento dinamico di un sistema, evidenziando le azioni e le decisioni che avvengono durante l'esecuzione di un'attività.

Caratteristiche principali di un diagramma delle attività:

    .Azioni: Rappresentano i compiti o le operazioni che vengono eseguite (ad esempio, "Inserire credenziali" o "Verificare accesso").

    .Transizioni: Le linee che collegano le azioni, indicano il flusso di esecuzione da un'azione all'altra.

    .Decisoni: Un nodo di decisione, spesso rappresentato da un rombo, indica un punto in cui il flusso del processo si biforca in due o più direzioni a          seconda di una condizione.

    .Fork e Join: Utilizzati per rappresentare la concorrenza. Un fork divide un flusso di attività in più flussi paralleli, mentre un join li riunisce.

    .Inizio e Fine: Indicano i punti di partenza e di conclusione di un processo. L'inizio è rappresentato da un cerchio pieno, mentre la fine è     rappresentata da un cerchio con un bordo spesso.

    .Attività parallele: Possono essere rappresentate per indicare che più attività vengono eseguite contemporaneamente (ad esempio, più thread che girano         parallelamente).

  +----------------------------+
  |          Inizio             |
  +----------------------------+
              |
              v
  +----------------------------+
  | Inserisci credenziali       |
  +----------------------------+
              |
              v
  +----------------------------+
  | Verifica credenziali        |
  +----------------------------+
              |
              v
  +----------------------------+
  | Credenziali corrette?       |
  +----------------------------+
     /           \
  No /             \ Sì
   /                 \
  v                   v
+-----------------+   +---------------------+
| Mostra errore   |   |  Login riuscito     |
+-----------------+   +---------------------+
        |                    |
        v                    v
   +----------------------------+
   |           Fine              |
   +----------------------------+

///////////////////

Design pattern:




